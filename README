Exmap
=====

Summary
-------

Exmap is a tool to allow the real memory usage of a collection of
processes to be examined. A linux kernel loadable module is used to
export information to userspace, which is examined by a perl/gtk
application to build a picture of how pages are shared amongst
processes and their shared libraries.

Section-level information is exposed for ELF files and symbol-level
information is exposed for unstripped ELF files.

NOTE: exmap hasn't received widespread testing as yet (14/11/2005) and
I'd be very interested in hearing of any problems you may have. Please
see the feedback section at the end for my contact details.

There is some documentation in the html/ sub-directory (may require
server-side-include to read easily). I'm hoping to host these pages
somewhere soon.

Description
-----------

For each process and for each mapped file, the following information
is provided:

1) Size

This is the overall VM size of the entity, i.e. its virtual address
space. This isn't directly relevant to how much of your memory it is
using. For processes, this should be the same as the 'VIRT' column in
the output of "top".

2) Mapped Size

This is a more interesting figure. This is the total of all the pages
which are mapped by that process. To be precise, it is the total of
all pages for which the kernel can successfully find a valid 'pfn',
via page-table walking and pte_pfn().

3) Effective Size

This figure is an adjusted version of 'mapped size'. Each pages'
contribution to the size is divided by the number of processes *WHICH
WE HAVE SCANNED* which map this page. i.e. the cost of a page is
shared amongst all the processes which use it.

Running exmap.pl as root should give correct values for this
figure. Whilst in general you should be wary of running anything as
root, bear in mind that to use exmap.pl at all, you are installing a
kernel module which implies you're trusting this code at
root-equivalent privs anyway.



Additionally, if you select a process, you get a list of all files
mapped by that process, with the above sizes (vm, mapped and
effective) for that file *in that process*.

Similarly, selecting a file in the 'Files' tab gives you a list of
processes mapping that file.


If the selected file is an ELF file (i.e. an executable or shared
library) then the ELF sections within that file will be listed. There
are quite a few of those, most of which can be ignored. Here's a crib
sheet to some of the important ones (corrections gratefully received):

.text		This contains all the executable code for the exe/lib
.data		This is static, global or file-scope data in the app. This is
		generally mapped read/write by the OS. Data which is read
		will be shared amongst processes which make use of it.
		Data which is written to will cause a COW (copy on write)
		fault which will cause the process to get a private copy
		of the entire page in which the write occured.
.rodata		As for .data, but the compiler has determined it is read-only
		This is typically mapped read-only into memory (along with
		the .text section)
.bss		As for .data, but the items were all uninitialised (which the
		C standard requires to mean 'initialised to zero'). The OS
		can play games here to reduce the memory usage. In
		particular, it seems that all .bss pages which have only
		been read are shared amongst all apps. Which is nice.


If you select an ELF section, and the underyling file is *not
stripped*, then the right hand window will display a list of all ELF
symbols in that section (with appropriate sizes). Note that typically
*all* system binaries in a Linux distro are stripped. (To save disk
space? I don't think the symbols tables would get mapped into
memory). Hence this facility is probably only of use if you are
running binaries you have built yourself. But then it is pretty
cool...


Building
--------

Typing 'make clean && make' should rebuild the exmap.ko kernel
module. If not, you may need to install the appropriate packages to
build kernel modules. On ubuntu, this is the 'linux-headers' package
for your kernel.

If you get an error building, you can try just 'make exmap.ko'. This
will skip building the test executables, which appears to fail on some
64-bit platforms. However, you won't be able to run the tests.

Once you've built the 'exmap.ko', you can make use of it with:

"sudo insmod ./exmap.ko"

after which is should show up in "lsmod | grep exmap".

You can then run the UI with 'perl exmap.pl', or 'sudo perl exmap.pl'
to run as root.

You'll need the perl/gtk2 modules installed. On ubuntu, this is
"libgtk2-perl".


Notes
-----

- The values for mapped files are summed over all processes mapping the file.

- ELF symbols appear to be working. As of exmap-0.5, this include
byte-level granlarity in the reporting.

- Developed and tested on Linux 2.6.12, 32-bit x86 (Pentium 4). I'm
interested to know of any problems with building or running it,
particularly on other kernel versions and processor types
(e.g. 64-bit).


Feedback
--------

If you use exmap, I'd appreciate an email to help gauge the level of
interest in this tool. If you find any problems or have any ideas or
suggestions for improvement, I'd be very interested in hearing from
you.

Having 'exmap' in your subject line or body increases the chances that
your message won't get lost in the spam.


John Berthels
<jjberthels@gmail.com>
