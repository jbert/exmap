For 0.8.1
=========

DONE - (re-)test on FC4

DONE - fix FC4 bug
	DONE - after adding test case

- add coverage testing support to makefile
	- better Exmap coverage
	- 	mkdir -p ./coverage
	lcov --directory $STAP_OBJ --zerocounters
	runtest --tool=systemtap
	lcov --directory $STAP_OBJ --capture --output-file ./coverage/stap.info
	genhtml -o ./coverage ./coverage/stap.info

NO - make 'prefix' part of jutil stream
	- and make an RAII-like object to set and clear it per func
	    - defaults to setting/unsetting both warn and debug

DONE - make jutil streams run-time enable-able
  - so can turn on debug


DONE - 2.6.8.1 done

DONE - update kernel reqs in faq (elsewhere)

DONE - fix artsd bug on Mandriva

DONE - use VPanes

DONE? - try and fix intermittent test failures

For 0.9
=======

- support 64bit (Elf!)
  - #define at compile time?
  - template!?
  - remove Elf_ types from Elf::* methods

- command line tool
  - list procs/files with summary
  - specify proc/file and get basic info
  - specify proc/file and list files/procs
  - specify proc+file and list ELF info?

- consider handling totals differently
  - best would be something outside of the file/proc tab.
  - a single text string on the bottombar looks ugly
    - multiple labels?
      - too wide
    - perhaps split over two lines or something?
  - even if keep totals in proc list, perhaps add to file too?

- somehow test on 64bit
	- finish sysinfo
		- merge read_vma and read_page_info so can override
		them both in test sysinfo
			- have read /proc/x/maps as protected func
		- write TestNoModuleLinuxSysInfo
			- which reads /proc/x/maps and makes up page info
				- is there a way to make it test-compatible?
				- or skip those tests if in that mode?
		- add a switch (on ENV var?) to enable no-module mode
		for t_exmap
		- test locally
		- test on hp testdrive

Sometime
========

- document non-page-aligned values for files

- command line tool, with various options on what to report (which
measures, which items)

- try and show thread stack usage
	- maybe additional info from kernel module?

- support earlier kernel versions (no pud_t. See mail from Joaquim)
	- also need to worry about [vdso] name

- we can have a map to a (deleted) file. We'll fail to open this
(d'uh). What problem does this cause? Just a "non elf" file?

- read /proc/k?mem using pfn to show hex contents?
	- I think /dev/mem is what is wanted.
	- shift pfn to get a physical address
	- seek & read /dev/mem to read data

	- add a 'RangeView' to exmap.pl
		- pfns are in Vma, so add 'read_mem_range' to that?

Which of these would be most useful?

- Find a way to identify glibc [anon] maps as heap

- We are holding an open fd to each Elf file. We probably need it to
seek to read symbols, unless we open/close there (or make it private
and do it in the caller).

- if we do 'reload', functionality then will need to explicitly break
proc <-> file <-> vma links since the shared_ptr's are refcounting
won't. (use weak_ptr)

- try and factor out common code between filetab and proctab

- add 'reload'
	- check for memleaks caused by shared_ptr

- right justify Sizes
	- use %10.2f as the format
	- but then need fixed-width font in text renderer
		- do-able?
		- perhaps change default font for all of it?
		- could pad with leading zeros <ugh>

- doxygen
	- basic doc on all classes
	- need to mark todo's as \todo
	DONE - add TODO generation
	DONE - up and running


------------------------------------------------------------
