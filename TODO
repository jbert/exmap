- use binary exmap output for speed?

- lose the 'first_cols'/sizes distinction?

- document non-page-aligned values for files

NO - have computable columns, based on user-specified code.
	- add UI to control which columns are visible

	- turn '::Sizes' inside out. Instead of accumulated values,
	with the code in sizes_for_mem_range, we need a 'zero' and
	'accumulate' method on an abstract 'Size' or 'Measure'
	class. This object is then passed in and gets the @info poked
	at it (or better, don't need to put together the infolist at
	all...that list of hash refs can go. Instead page_cookie and
	range are args to the size func (which takes flags, gets count
	and calls the abstract func).

	- Then usercode fits in nicely as a new subclass, using an
	'eval' subref as the abstract.

- have a sanity check for writable numbers
	- can we add some unit tests?
		- perhaps run some 'mapper' progs to get some different
		mmap() behaviour.

- config file
	DONE - allow configuration of columns per listview
	- allow specification of perl subs as column definitions
	- build listviews dynamically?

- command line tool, with various options on what to report (which
measures, which items)

- try and show thread stack usage
	- maybe additional info from kernel module?

- support earlier kernel versions (no pud_t. See mail from Joaquim)
	- also need to worry about [vdso] name

- is there a way to avoid the sysread/seek for each string name in ELF?
	- maybe read the string table in chunks?
		- or cache 1 page

- we can have a map to a (deleted) file. We'll fail to open this
(d'uh). What problem does this cause? Just a "non elf" file?

DONE - update Makefile with 'normal CFLAGS'. Perhaps -fPIC for all?	

- read /proc/k?mem using pfn to show hex contents?
	- I think /dev/mem is what is wanted.
	- shift pfn to get a physical address
	- seek & read /dev/mem to read data

	- add a 'RangeView' to exmap.pl
		- pfns are in Vma, so add 'read_mem_range' to that?

Which of these would be most useful?

- Find a way to identify glibc [anon] maps as heap

- Elf.pm is holding an open fd to each Elf file. We probably need it
to seek to read symbols, unless we open/close there (or make it
private and do it in the caller).

- if we do 'reload', functionality then will need to explicitly break
proc <-> file <-> vma links since refcounting won't.
